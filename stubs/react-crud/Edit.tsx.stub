import 'primeicons/primeicons.css';
import AppLayout from '@/layouts/app-layout';
import {ValidateField, IsRequired} from '@/lib/RuleValidation';
import { type BreadcrumbItem } from '@/types';
import { useRef, useState, useEffect } from 'react';
import { Head, useForm, usePage, router } from '@inertiajs/react';
import { InputText } from 'primereact/inputtext';
import { InputNumber } from 'primereact/inputnumber';
import { SelectButton } from 'primereact/selectbutton';
import AuthButton from '@/components/customs/auth-button';
import { Toast } from 'primereact/toast';
import { useLang } from '@/lib/lang';

type Props = {
  rules: any;
  {{ model }}: any;
};

const Edit{{ Model }}Page: React.FC<Props> = ({ rules, {{ model }} }) => {
  const toast = useRef<Toast>(null);
  const { __ } = useLang();

  {{ use_form_edit }}
  const { errors } = usePage<{ errors: Record<string, string> }>().props;
  const [clientErrors, setClientErrors] = useState<Record<string, string>>({});
  const flash = (usePage().props as any)?.flash || {};
  const [isNavigatingBack, setIsNavigatingBack] = useState(false);

  useEffect(() => setClientErrors(prev => ({ ...prev, ...errors })), [errors]);
  useEffect(() => {
    if (flash?.success) toast.current?.show({ severity: 'success', summary: 'Success', detail: flash.success });
    if (flash?.error) toast.current?.show({ severity: 'error', summary: 'Error', detail: flash.error });
  }, [flash]);

  const breadcrumbs: BreadcrumbItem[] = [
    { title: __('{{ model }}.edit_{{ model }}'), href: route('{{ modelPlural }}.index') },
  ];

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const newErrors = ValidateField(data, rules, __);
    if (Object.keys(newErrors).length > 0) return setClientErrors(newErrors);
    put(route('{{ modelPlural }}.update', {{ model }}.id), { preserveScroll: true });
  };

  return (
    <AppLayout breadcrumbs={breadcrumbs}>
      <Head title={__('{{ model }}.edit_{{ model }}')} />
      <Toast ref={toast} />

      <div className="form-group">
        <h2 className="text-xl font-bold mb-4">{__('{{ model }}.edit_{{ model }}')}</h2>

        <form onSubmit={handleSubmit}>
          {{ form_fields }}

          <div className="flex justify-end gap-2 mt-6">
            <AuthButton
              permission='{{ modelPlural }}.index'
              type="button"
              label={__('button.cancel')}
              className="p-button-secondary"
              onClick={() => {
                setIsNavigatingBack(true);
                router.visit(route('{{ modelPlural }}.index'), { onFinish: () => setIsNavigatingBack(false) });
              }}
              loading={isNavigatingBack}
            />
            <AuthButton
              permission='{{ modelPlural }}.update'
              type="submit"
              label={__('button.update')}
              loading={processing}
            />
          </div>
        </form>
      </div>
    </AppLayout>
  );
};

export default Edit{{ Model }}Page;